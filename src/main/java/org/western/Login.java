/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.western;

import com.google.common.io.BaseEncoding;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.kordamp.ikonli.remixicon.RemixiconAL;
import org.kordamp.ikonli.remixicon.RemixiconMZ;
import org.kordamp.ikonli.swing.FontIcon;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Objects;
import java.util.Scanner;

import static java.security.MessageDigest.getInstance;
import javax.imageio.ImageIO;


/**
 * @author m
 */
public class Login extends javax.swing.JFrame {

    private static String weatherPath = System.getProperty("user.home") + "/weather.json";
    private static boolean signingup = false;
    
    /**
     * Creates new form Login
     */
    public Login(boolean debug) {

        if (debug) {

            JsonDB db;
            db = new JsonDB(false);
            Map.addUser("test", "1234");

        }
        else {
            new JsonDB(false);
        }
        
        initComponents();
        initLoginPanel();
        prepareIcon();
        loadWeather();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layerPanel = new javax.swing.JLayeredPane();
        bgPanel = new javax.swing.JPanel();
        bg = new javax.swing.JLabel();
        loginLayer = new javax.swing.JLayeredPane();
        loginPanel = new javax.swing.JPanel();
        logoPanel = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        formPanel = new javax.swing.JPanel();
        honeyPot = new javax.swing.JTextField();
        userText = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        passwordText = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        submitPanel = new javax.swing.JPanel();
        onLogin = new javax.swing.JButton();
        condition = new javax.swing.JLabel();
        signupButton = new javax.swing.JButton();
        weatherPanel = new javax.swing.JPanel();
        placeholderPanel = new javax.swing.JPanel();
        weatherLayer = new javax.swing.JLayeredPane();
        weatherIcon = new javax.swing.JPanel();
        wIcon = new javax.swing.JLabel();
        wText = new javax.swing.JLabel();
        weatherInfo = new javax.swing.JPanel();
        tempUp = new javax.swing.JLabel();
        tempDown = new javax.swing.JLabel();
        placeholderTemp = new javax.swing.JLabel();
        cText = new javax.swing.JLabel();
        dText = new javax.swing.JLabel();
        mask = new javax.swing.JPanel();
        maskBg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        layerPanel.setPreferredSize(new java.awt.Dimension(600, 400));

        bgPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        bgPanel.setLayout(new java.awt.BorderLayout());
        bgPanel.add(bg, java.awt.BorderLayout.CENTER);

        loginLayer.setPreferredSize(new java.awt.Dimension(300, 400));
        loginLayer.setLayout(new javax.swing.OverlayLayout(loginLayer));

        loginPanel.setBackground(new java.awt.Color(255, 255, 255));
        loginPanel.setOpaque(false);
        loginPanel.setPreferredSize(new java.awt.Dimension(300, 400));

        logoPanel.setOpaque(false);
        logoPanel.setLayout(new java.awt.BorderLayout());

        logo.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        logo.setAlignmentX(0.5F);
        logo.setPreferredSize(new java.awt.Dimension(260, 80));
        logoPanel.add(logo, java.awt.BorderLayout.CENTER);

        loginPanel.add(logoPanel);

        title.setFont(new java.awt.Font("New York", 0, 24)); // NOI18N
        title.setForeground(new java.awt.Color(78, 38, 131));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Campus Map Viewer");
        title.setPreferredSize(new java.awt.Dimension(300, 40));
        loginPanel.add(title);

        formPanel.setOpaque(false);
        formPanel.setPreferredSize(new java.awt.Dimension(300, 140));

        honeyPot.setBackground(new Color(0, 0, 0, 0 ));
        honeyPot.setForeground(new Color(0,0,0,200));
        honeyPot.setBorder(null);
        honeyPot.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        honeyPot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                honeyPotActionPerformed(evt);
            }
        });
        formPanel.add(honeyPot);

        userText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        userText.setForeground(new java.awt.Color(17, 51, 85));
        userText.setText("Username");
        userText.setToolTipText("");
        userText.setPreferredSize(new java.awt.Dimension(260, 20));
        formPanel.add(userText);

        usernameField.setColumns(22);
        usernameField.setText("Enter your username");
        usernameField.setBorder(null);
        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });
        formPanel.add(usernameField);

        passwordText.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        passwordText.setForeground(new java.awt.Color(17, 51, 85));
        passwordText.setText("Password");
        passwordText.setPreferredSize(new java.awt.Dimension(260, 20));
        formPanel.add(passwordText);

        passwordField.setColumns(22);
        passwordField.setText("password");
        passwordField.setBorder(null);
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        formPanel.add(passwordField);

        loginPanel.add(formPanel);

        submitPanel.setOpaque(false);
        submitPanel.setPreferredSize(new java.awt.Dimension(280, 40));
        submitPanel.setLayout(new java.awt.GridBagLayout());

        onLogin.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        onLogin.setText("Login");
        onLogin.setBorder(null);
        onLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onLoginActionPerformed(evt);
            }
        });
        submitPanel.add(onLogin, new java.awt.GridBagConstraints());

        condition.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        condition.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        condition.setText("or");
        condition.setPreferredSize(new java.awt.Dimension(86, 20));
        submitPanel.add(condition, new java.awt.GridBagConstraints());

        signupButton.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        signupButton.setText("Create Account");
        signupButton.setBorder(null);
        signupButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signupButtonMouseClicked(evt);
            }
        });
        signupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupButtonActionPerformed(evt);
            }
        });
        submitPanel.add(signupButton, new java.awt.GridBagConstraints());

        loginPanel.add(submitPanel);

        weatherPanel.setOpaque(false);
        weatherPanel.setPreferredSize(new java.awt.Dimension(280, 60));
        weatherPanel.setLayout(new javax.swing.BoxLayout(weatherPanel, javax.swing.BoxLayout.LINE_AXIS));

        placeholderPanel.setOpaque(false);

        javax.swing.GroupLayout placeholderPanelLayout = new javax.swing.GroupLayout(placeholderPanel);
        placeholderPanel.setLayout(placeholderPanelLayout);
        placeholderPanelLayout.setHorizontalGroup(
            placeholderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );
        placeholderPanelLayout.setVerticalGroup(
            placeholderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        weatherPanel.add(placeholderPanel);

        weatherIcon.setOpaque(false);
        weatherIcon.setPreferredSize(new java.awt.Dimension(60, 60));
        weatherIcon.setRequestFocusEnabled(false);
        weatherIcon.setLayout(new java.awt.GridLayout(1, 0, 5, 5));
        weatherIcon.add(wIcon);

        wText.setText("Loading");

        weatherLayer.setLayer(weatherIcon, javax.swing.JLayeredPane.DEFAULT_LAYER);
        weatherLayer.setLayer(wText, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout weatherLayerLayout = new javax.swing.GroupLayout(weatherLayer);
        weatherLayer.setLayout(weatherLayerLayout);
        weatherLayerLayout.setHorizontalGroup(
            weatherLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(weatherLayerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wText)
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(weatherLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(weatherLayerLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(weatherIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        weatherLayerLayout.setVerticalGroup(
            weatherLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, weatherLayerLayout.createSequentialGroup()
                .addGap(0, 43, Short.MAX_VALUE)
                .addComponent(wText))
            .addGroup(weatherLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(weatherLayerLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(weatherIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        weatherPanel.add(weatherLayer);

        weatherInfo.setToolTipText("");
        weatherInfo.setOpaque(false);
        weatherInfo.setPreferredSize(new java.awt.Dimension(200, 80));
        weatherInfo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        tempUp.setText("--°C");
        tempUp.setPreferredSize(new java.awt.Dimension(60, 28));
        weatherInfo.add(tempUp);

        tempDown.setText("--°C");
        tempDown.setPreferredSize(new java.awt.Dimension(60, 28));
        weatherInfo.add(tempDown);

        placeholderTemp.setPreferredSize(new java.awt.Dimension(60, 28));
        weatherInfo.add(placeholderTemp);

        cText.setText("Loading geolocation");
        cText.setPreferredSize(new java.awt.Dimension(180, 16));
        weatherInfo.add(cText);

        dText.setText("Loading weather data");
        dText.setPreferredSize(new java.awt.Dimension(180, 16));
        weatherInfo.add(dText);

        weatherPanel.add(weatherInfo);

        loginPanel.add(weatherPanel);

        loginLayer.setLayer(loginPanel, javax.swing.JLayeredPane.POPUP_LAYER);
        loginLayer.add(loginPanel);

        mask.setOpaque(false);
        mask.setLayout(new java.awt.BorderLayout());

        maskBg.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        maskBg.setMaximumSize(new java.awt.Dimension(300, 400));
        maskBg.setMinimumSize(new java.awt.Dimension(300, 400));
        maskBg.setPreferredSize(new java.awt.Dimension(300, 400));
        mask.add(maskBg, java.awt.BorderLayout.CENTER);

        loginLayer.add(mask);

        layerPanel.setLayer(bgPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPanel.setLayer(loginLayer, javax.swing.JLayeredPane.POPUP_LAYER);

        javax.swing.GroupLayout layerPanelLayout = new javax.swing.GroupLayout(layerPanel);
        layerPanel.setLayout(layerPanelLayout);
        layerPanelLayout.setHorizontalGroup(
            layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layerPanelLayout.createSequentialGroup()
                    .addGap(0, 300, Short.MAX_VALUE)
                    .addComponent(loginLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layerPanelLayout.setVerticalGroup(
            layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(loginLayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(layerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(layerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameFieldActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void onLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onLoginActionPerformed
        if (!signingup) handleLogin();
        else {
            handleSignup();
        }
    }//GEN-LAST:event_onLoginActionPerformed

    private void signupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_signupButtonActionPerformed

    private void honeyPotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_honeyPotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_honeyPotActionPerformed

    private void signupButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signupButtonMouseClicked
        if (signingup) {
            MainWindow mainWindow = new MainWindow(false, null);
            mainWindow.setVisible(true);
            dispose();
        }
        else {
            condition.setPreferredSize(new java.awt.Dimension(60, 20));
            onLogin.setText("Signup");
            signupButton.setText("Continue as Guest");
            signingup = true;
        }
    }//GEN-LAST:event_signupButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login(false).setVisible(true);
            }
        });
    }

    private void initLoginPanel() {
        int padding = 10;
        Point center = GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint();
        Border defaultBorder = BorderFactory.createLineBorder(Color.decode("#eaeaea")), // create default line border
                focusBorder = BorderFactory.createLineBorder(Color.decode("#666666")), // create focused line border
                underlineBorder = BorderFactory.createMatteBorder(0, 0, 1, 0, Color.decode("#2470cc")), // create underline border
                underlineFocusBorder = BorderFactory.createMatteBorder(0, 0, 1, 0, Color.decode("#666666")); // create underline focused border
        this.setLocation(center.x - this.getWidth() / 2, center.y - this.getHeight() / 2);
        this.setResizable(false);
        this.setBackground(Color.WHITE);
        onLogin.setBackground(Color.decode("#4e2683")); // set background color of onLogin button
        onLogin.setForeground(Color.WHITE); // set text color of onLogin button
        onLogin.setBorder(BorderFactory.createEmptyBorder()); // remove border of onLogin button
        onLogin.setContentAreaFilled(false); // remove background of onLogin button
        onLogin.setOpaque(true); // make onLogin button opaque
        onLogin.setCursor(new Cursor(Cursor.HAND_CURSOR)); // set cursor to hand cursor
        signupButton.setForeground(Color.decode("#2470cc")); // set text color of guestLogin button
        signupButton.setBorder(BorderFactory.createEmptyBorder()); // remove border of guestLogin button
        signupButton.setContentAreaFilled(false); // remove background of guestLogin button
        signupButton.setOpaque(false); // make guestLogin button opaque
        usernameField.setForeground(Color.decode("#666666"));
        usernameField.setBorder(
                BorderFactory.createCompoundBorder(
                        defaultBorder, BorderFactory.createEmptyBorder(padding, padding, padding, padding)
                )
        );
        passwordField.setBorder(
                BorderFactory.createCompoundBorder(
                        defaultBorder, BorderFactory.createEmptyBorder(padding, padding, padding, padding)
                )
        );
        onLogin.setBorder(
                BorderFactory.createCompoundBorder(
                        defaultBorder, BorderFactory.createEmptyBorder(padding, 2 * padding, padding, 2 * padding)
                )
        );
        signupButton.setBorder(underlineBorder);

        // add hover effect to onSearch button
        onLogin.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                // change background color gradually
                onLogin.setBackground(Color.decode("#7b5da2"));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                onLogin.setBackground(Color.decode("#4e2683"));
            }
        });
        usernameField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                usernameField.setForeground(Color.decode("#000000"));
                usernameField.setBorder(
                        BorderFactory.createCompoundBorder(
                                focusBorder, BorderFactory.createEmptyBorder(padding, padding, padding, padding)
                        )
                );
                if (usernameField.getText().equals("Enter your username")) {
                    usernameField.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                usernameField.setForeground(Color.decode("#666666"));
                usernameField.setBorder(
                        BorderFactory.createCompoundBorder(
                                defaultBorder, BorderFactory.createEmptyBorder(padding, padding, padding, padding)
                        )
                );
                if (usernameField.getText().equals("")) {
                    usernameField.setText("Enter your username");
                }
            }
        });
        passwordField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                passwordField.setForeground(Color.decode("#000000"));
                passwordField.setBorder(
                        BorderFactory.createCompoundBorder(
                                focusBorder, BorderFactory.createEmptyBorder(padding, padding, padding, padding)
                        )
                );
                if (new String(passwordField.getPassword()).equals("password")) {
                    passwordField.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                String username = "", password = "";
                passwordField.setForeground(Color.decode("#666666"));
                passwordField.setBorder(
                        BorderFactory.createCompoundBorder(
                                defaultBorder, BorderFactory.createEmptyBorder(padding, padding, padding, padding)
                        )
                );
                password = new String(passwordField.getPassword());
                if (password.equals("")) {
                    passwordField.setText("password");

                }
                // check password strength
                if (password.length() > 10 && password.matches("^(?=.*[A-Za-z])(?=.*\\d).+$")) {
                    FontIcon passwordIcon = (FontIcon) passwordText.getIcon();
                    passwordIcon.setIconColor(Color.decode("#30d158"));
                    passwordText.setIcon(passwordIcon);
                    passwordText.setForeground(Color.decode("#30d158"));
                } else {
                    FontIcon passwordIcon = (FontIcon) passwordText.getIcon();
                    passwordIcon.setIconColor(Color.decode("#666666"));
                    passwordText.setIcon(passwordIcon);
                    passwordText.setForeground(Color.decode("#666666"));
                }
            }
        });
        // listen on enter key press
        passwordField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    onLogin.doClick();
                }
            }
        });
        // add underline effect to guestLogin button
        signupButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                signupButton.setForeground(Color.decode("#666666"));
                signupButton.setBorder(underlineFocusBorder);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                signupButton.setForeground(Color.decode("#2470cc"));
                signupButton.setBorder(underlineBorder);
            }
        });
    }

    private void prepareIcon() {
        try {
            // set images as icons
            ImageIcon b = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("assets/bg.jpg")))),
                    m = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("assets/masked_bg.png")))),
                    l = new ImageIcon(ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("assets/logo.png"))));
            FontIcon u = FontIcon.of(RemixiconMZ.USER_3_LINE, 20, Color.decode("#113355")),
                    p = FontIcon.of(RemixiconAL.LOCK_PASSWORD_LINE, 20, Color.decode("#113355")),
                    w = FontIcon.of(RemixiconAL.CLOUD_OFF_FILL, 40, Color.decode("#8e8e93")),
                    up = FontIcon.of(RemixiconAL.ARROW_UP_S_LINE, 20, Color.decode("#ff3b30")),
                    down = FontIcon.of(RemixiconAL.ARROW_DOWN_S_LINE, 20, Color.decode("#30d158"));
            b = new ImageIcon(b.getImage().getScaledInstance(600, 400, Image.SCALE_SMOOTH));
            l = new ImageIcon(l.getImage().getScaledInstance(260, 260 * l.getIconHeight() / l.getIconWidth(), Image.SCALE_SMOOTH));
            m = new ImageIcon(m.getImage().getScaledInstance(300, 400, Image.SCALE_SMOOTH));
            bg.setIcon(b);
            maskBg.setIcon(m);
            logo.setIcon(l);
            userText.setIcon(u);
            passwordText.setIcon(p);
            wIcon.setIcon(w);
            tempUp.setIcon(up);
            tempDown.setIcon(down);
        } catch (Exception e) {
            // placeholder when icons load failed
            bg.setBackground(Color.decode("#e8d4ff"));
            maskBg.setBackground(Color.decode("#ffffff"));
            logo.setText("Western Logo");
            logo.setFont(new Font("New York", 0, 24)); // NOI18N
            logo.setForeground(new Color(78, 38, 131));
        }
    }

    private void loadWeather() {
        double lat = 0, lon = 0;
        JsonObject data;
        wText.setForeground(Color.decode("#8e8e93"));
        tempUp.setFont(new Font("Inter", 0, 14));
        tempDown.setFont(new Font("Inter", 0, 14));
        // get latitude and longitude from API
        try {
            String url = "https://freegeoip.app/json/";
            URL obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            con.setRequestMethod("GET");
            con.setRequestProperty("User-Agent", "Mozilla/5.0");
            int responseCode = con.getResponseCode();
            System.out.println("GET Response Code :: " + responseCode);
            if (responseCode == HttpURLConnection.HTTP_OK) { // success
                BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
                String inputLine;
                StringBuffer response = new StringBuffer();
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();
                // print result
                System.out.println(response.toString());
                // parse JSON
                data = JsonParser.parseString(response.toString()).getAsJsonObject();
                lat = data.get("latitude").getAsDouble();
                lon = data.get("longitude").getAsDouble();
                cText.setText(data.get("city").getAsString() + ", " + data.get("region_name").getAsString());
            } else {
                System.out.println("GET request not worked");
                return;
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            cText.setText("Failed to fetch geolocation.");
        }
        // get weather data from API
        try {
            String url = "https://api.open-meteo.com/v1/forecast?latitude=" + lat + "&longitude=" + lon + "&daily=weathercode,temperature_2m_max,temperature_2m_min&forecast_days=1&timezone=America%2FNew_York";
            URL obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            con.setRequestMethod("GET");
            con.setRequestProperty("User-Agent", "Mozilla/5.0");
            int responseCode = con.getResponseCode();
            System.out.println("GET Response Code :: " + responseCode);
            if (responseCode == HttpURLConnection.HTTP_OK) { // success
                BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
                String inputLine;
                StringBuffer response = new StringBuffer();
                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();
                // print result
                System.out.println(response);
                // get weather data
                data = JsonParser.parseString(response.toString()).getAsJsonObject();
                if(data != null) {
                    handleWeatherData(data);
                } else {
                    wText.setText("Weather data unavailable.");
                }
            } else {
                cText.setText("Weather data unavailable.");
                System.out.println("GET request not worked.");
            }
        } catch (Exception e) {
            try {
                // get weather data from local file
                File f = new File(weatherPath);
                Scanner s = new Scanner(f);
                StringBuilder dataStr = new StringBuilder();
                while (s.hasNextLine()) {
                    dataStr.append(s.nextLine());
                }
                s.close();
                data = JsonParser.parseString(dataStr.toString()).getAsJsonObject();
                if(data != null) {
                    handleWeatherData(data);
                } else {
                    dText.setText("Weather data unavailable.");
                }
            } catch (Exception ex) {
                dText.setText("Weather data unavailable.");
                ex.printStackTrace();
            }
        }
    }

    private int handleWeatherData(JsonObject data) {
        int weatherCode; // weather code
        String weatherDesc; // weather description
        StringBuilder upTemp = new StringBuilder(), downTemp = new StringBuilder(), // temperature
        dateSB = new StringBuilder(); // weather date
        HashMap<Integer, String> wmoWeatherCodes = new HashMap<>() {
            {
                put(0, "Metar not available");
                put(1, "Clear sky");
                put(2, "Partly cloudy");
                put(3, "Cloudy");
                put(4, "Overcast");
                put(5, "Foggy");
                put(6, "Light rain");
                put(7, "Moderate rain");
                put(8, "Heavy rain");
                put(9, "Intense rain");
                put(10, "Freezing rain");
                put(11, "Light freezing rain");
                put(12, "Moderate freezing rain");
                put(13, "Heavy freezing rain");
                put(14, "Snow shower");
                put(15, "Light snowfall");
                put(16, "Moderate snowfall");
                put(17, "Heavy snowfall");
                put(18, "Thunderstorm");
                put(19, "Hailstorm");
                put(20, "Mist");
                put(21, "Haze");
                put(22, "Smoke");
                put(23, "Dust/sandstorm");
                put(24, "Windy");
                put(25, "Blustery");
                put(26, "Snowstorm");
                put(27, "Heavy snowstorm");
                put(28, "Thunderstorms and rain");
                put(29, "Thunderstorms and snow");
                put(30, "Tornado");
            }
        };
        weatherCode = data.get("daily").getAsJsonObject().get("weathercode").getAsJsonArray().get(0).getAsInt();
        // convert wmo code to weather description
        weatherDesc = wmoWeatherCodes.get(weatherCode);
        wText.setText(weatherDesc);
        if (weatherDesc.toUpperCase().contains("RAIN") || weatherDesc.toUpperCase().contains("SNOW") || weatherDesc.toUpperCase().contains("STORM")) {
            wText.setForeground(Color.decode("#32ade6"));
            if (weatherDesc.toUpperCase().contains("RAIN")) {
                wIcon.setIcon(FontIcon.of(RemixiconMZ.RAINY_FILL, 40, Color.decode("#32ade6")));
            } else if (weatherDesc.toUpperCase().contains("SNOW")) {
                wIcon.setIcon(FontIcon.of(RemixiconMZ.SNOWY_FILL, 40, Color.decode("#32ade6")));
            } else if (weatherDesc.toUpperCase().contains("STORM")) {
                wIcon.setIcon(FontIcon.of(RemixiconMZ.THUNDERSTORMS_FILL, 40, Color.decode("#32ade6")));
            }
        } else if(weatherDesc.toUpperCase().contains("FOG") || weatherDesc.toUpperCase().contains("HAZE") || weatherDesc.toUpperCase().contains("SMOKE") || weatherDesc.toUpperCase().contains("DUST")) {
            wText.setForeground(Color.decode("#5856d6"));
            wIcon.setIcon(FontIcon.of(RemixiconAL.FOGGY_FILL, 40, Color.decode("#8e8e93")));
        } else if (weatherDesc.toUpperCase().contains("CLOUDY") || weatherDesc.toUpperCase().contains("OVERCAST")) {
            wText.setForeground(Color.decode("#40c8e0"));
            wIcon.setIcon(FontIcon.of(RemixiconAL.CLOUDY_FILL, 40, Color.decode("#40c8e0")));
        } else if (weatherDesc.toUpperCase().contains("CLEAR")) {
            wText.setForeground(Color.decode("#ff9500"));
            wIcon.setIcon(FontIcon.of(RemixiconMZ.SUN_FILL, 40, Color.decode("#ff9500")));
        } else {
            wText.setForeground(Color.decode("#63e6e2"));
            wIcon.setIcon(FontIcon.of(RemixiconMZ.SUN_CLOUDY_FILL, 40, Color.decode("#63e6e2")));
        }
        upTemp.append(data.get("daily").getAsJsonObject().get("temperature_2m_max").getAsJsonArray().get(0).getAsInt());
        downTemp.append(data.get("daily").getAsJsonObject().get("temperature_2m_min").getAsJsonArray().get(0).getAsInt());
        upTemp.append("°C");
        downTemp.append("°C");
        tempUp.setText(upTemp.toString());
        tempDown.setText(downTemp.toString());
        dateSB.append("As of ");
        dateSB.append(data.get("daily").getAsJsonObject().get("time").getAsJsonArray().get(0).getAsString());
        dText.setText(dateSB.toString());
        // store in to json file
        try {
            FileWriter f = new FileWriter(weatherPath);
            BufferedWriter w = new BufferedWriter(f);
            w.write(data.toString());
            w.close();
        } catch (IOException e) {
            e.printStackTrace();
            return -1;
        }
        return 0;
    }

    private void handleSignup() {
        String username = usernameField.getText();
        String password = String.valueOf(passwordField.getPassword());
        if (Map.getUser(username) == null) {
            new User(username, password);
            handleLogin();
        }
    }
    
    private int handleLogin() {
        int padding = 5;
        byte[] b; // byte array of password
        String h; // hash of password
        User user;
        JDialog prompt = new JDialog(); // pop up dialog
        JLabel message = new JLabel();
        JButton confirm = new JButton("OK");

        Border defaultBorder = BorderFactory.createLineBorder(Color.decode("#eaeaea"));
        prompt.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        prompt.setModal(true);
        prompt.setSize(300, 100);
        prompt.setLocationRelativeTo(null);
        prompt.getContentPane().setBackground(Color.WHITE);
        prompt.setLayout(new FlowLayout());
        message.setFont(new Font("Inter", 0, 16));
        message.setForeground(Color.decode("#666666"));
        confirm.setBackground(Color.WHITE);
        confirm.setBorder(BorderFactory.createEmptyBorder()); // remove border of onLogin button
        confirm.setContentAreaFilled(false); // remove background of onLogin button
        confirm.setOpaque(true); // make onLogin button opaque
        confirm.setCursor(new Cursor(Cursor.HAND_CURSOR)); // set cursor to hand cursor
        confirm.setBorder(
                BorderFactory.createCompoundBorder(
                        defaultBorder, BorderFactory.createEmptyBorder(padding, 4 * padding, padding, 4 * padding)
                )
        );

        confirm.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                Border hoverBorder = BorderFactory.createLineBorder(Color.decode("#666666"));
                confirm.setBorder(
                        BorderFactory.createCompoundBorder(
                                hoverBorder, BorderFactory.createEmptyBorder(padding, 4 * padding, padding, 4 * padding)
                        ));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                Border defaultBorder = BorderFactory.createLineBorder(Color.decode("#eaeaea"));
                confirm.setBorder(
                        BorderFactory.createCompoundBorder(
                                defaultBorder, BorderFactory.createEmptyBorder(padding, 4 * padding, padding, 4 * padding)
                        ));
            }
        });
        confirm.addActionListener(e -> prompt.dispose());

        //get username and password from text fields
        String username = usernameField.getText();
        String password = new String(passwordField.getPassword());
        //

        if (!honeyPot.getText().isEmpty() || username.isEmpty() || password.isEmpty()) {
            return -1;
        }
        user = Map.getUser(username);
        if (user == null) {
            // pop up error message
            prompt.setTitle("Error");
            message.setText("Username or password is incorrect.");
            prompt.add(message);
            prompt.add(confirm);
            prompt.setVisible(true);
            return -2;
        }

        //hash input password
        b = password.getBytes(StandardCharsets.UTF_8);
        try {
            b = getInstance("MD5").digest(b);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        //

        // https://stackoverflow.com/questions/9655181/how-to-convert-a-byte-array-to-a-hex-string-in-java
        h = BaseEncoding.base16().lowerCase().encode(b);
        if (user.getPassword().equals(h)) { // check hash password
            prompt.setTitle("Success");
            message.setText("Login successful. Welcome, " + user.getUsername() + "!");
            prompt.add(message);
            prompt.add(confirm);
            prompt.setVisible(true);
            dispose();
            // check if user is admin
            /*if (user.isAdmin()) {
                MainWindow mainWindow = new MainWindow(0);
                mainWindow.setVisible(true);
                return 0;
            }
            MainWindow mainWindow = new MainWindow(user.get("id").getAsInt());
            mainWindow.setVisible(true);
            return 1;*/
            MainWindow mainWindow = new MainWindow(false, user);
            mainWindow.setVisible(true);
            return 0;
        } else {
            // pop up error message
            prompt.setTitle("Error");
            message.setText("Username or password is incorrect.");
            prompt.add(message);
            prompt.add(confirm);
            prompt.setVisible(true);
            return -2;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bg;
    private javax.swing.JPanel bgPanel;
    private javax.swing.JLabel cText;
    private javax.swing.JLabel condition;
    private javax.swing.JLabel dText;
    private javax.swing.JPanel formPanel;
    private javax.swing.JTextField honeyPot;
    private javax.swing.JLayeredPane layerPanel;
    private javax.swing.JLayeredPane loginLayer;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JLabel logo;
    private javax.swing.JPanel logoPanel;
    private javax.swing.JPanel mask;
    private javax.swing.JLabel maskBg;
    private javax.swing.JButton onLogin;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordText;
    private javax.swing.JPanel placeholderPanel;
    private javax.swing.JLabel placeholderTemp;
    private javax.swing.JButton signupButton;
    private javax.swing.JPanel submitPanel;
    private javax.swing.JLabel tempDown;
    private javax.swing.JLabel tempUp;
    private javax.swing.JLabel title;
    private javax.swing.JLabel userText;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel wIcon;
    private javax.swing.JLabel wText;
    private javax.swing.JPanel weatherIcon;
    private javax.swing.JPanel weatherInfo;
    private javax.swing.JLayeredPane weatherLayer;
    private javax.swing.JPanel weatherPanel;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.western;

import org.kordamp.ikonli.remixicon.RemixiconAL;
import org.kordamp.ikonli.remixicon.RemixiconMZ;
import org.kordamp.ikonli.swing.FontIcon;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.*;
//import java.io.File;
//import java.io.FileNotFoundException;

//import java.util.Dictionary;
import java.util.LinkedList;
import java.util.Objects;

/**
 * @author Maxwell, Emma
 * A JFrame to display all visual components of this program
 */
public class MainWindow extends javax.swing.JFrame {
    private int session = -1; // -1 for guest, 0 for admin, 1 for user
    
    private Building curBuilding;
    private Floor curFloor;
    private LinkedList<Floor> floorList;
    private LinkedList<Layer> layerList;
    private LinkedList<Room> roomList;
    private CanvasGUI canvas;
    private CanvasGUI smallMapPic;

    private int x, y, initialX, initialY, deltaX, deltaY;
    private boolean editMode = false;
    private boolean addingRoom = false;
    private Icon editButtonEnabled, editButtonDisabled;
    private Icon addRoomButtonEnabled, addRoomButtonDisabled;
    private Room draftRoom;
    private Polygon draftPoly;
    
    /**
     * Creates new form MainWindow
     * @author Maxwell, Emma
     */
    public MainWindow(boolean debug, User user) {
        
        // Print out user session
        if (user != null) System.out.println("User: " + user.getUsername() + " logged in");
        
        //demo code
        if (debug == true) {
        
            // Make Middlesex; add its floors
            curBuilding = new Building("Middlesex College", "MC");
            curBuilding.addFloor("Ground", "assets/MC-BF-1.png");
            curBuilding.addFloor("First", "assets/MC-BF-2.png");
            curBuilding.addFloor("Second", "assets/MC-BF-3.png");
            curBuilding.addFloor("Third", "assets/MC-BF-4.png");
            curBuilding.addFloor("Fourth", "assets/MC-BF-5.png");
            floorList = curBuilding.getFloors();
            // Set lowest floor as default landing floor
            curFloor = floorList.get(0);
            layerList = Map.getLayers();
            roomList = curFloor.getRooms();

            System.out.println("curFloor index: " + curBuilding.getFloors().indexOf(curFloor));
        }
        //

        initComponents();
        myInitComponents(); // added
        initMainWindow();
        initSearchBox();
        initButtons();
        renderFrame();
        prepareIcon();
        renderRooms();
    }

    /**
     * Creates new form MainWindow for a specified session
     * @param session an int representing the current session
     * @author Maxwell
     */
    /*public MainWindow(int session) {
        this.session = session;
        initComponents();
        initMainWindow();
        initSearchBox();
        renderFrame();
        prepareIcon();
    }*/

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layerPanel = new javax.swing.JLayeredPane();
        Frame = new javax.swing.JPanel();
        editButton = new javax.swing.JToggleButton();
        addRoomButton = new javax.swing.JToggleButton();
        nextFloorBtn = new javax.swing.JButton();
        prevFloorBtn = new javax.swing.JButton();
        smallMap = new javax.swing.JPanel();
        smallMapBtn = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        searchBox = new javax.swing.JTextField();
        onSearch = new javax.swing.JButton();
        dropDownPanel = new javax.swing.JPanel();
        filterPanel = new javax.swing.JPanel();
        filterIcon = new javax.swing.JLabel();
        filterText = new javax.swing.JLabel();
        selectBox = new javax.swing.JComboBox<>();
        resultContainer = new javax.swing.JPanel();
        resultPanel = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        layerPanel.setPreferredSize(new java.awt.Dimension(1200, 800));

        Frame.setForeground(new java.awt.Color(130, 130, 130));
        Frame.setPreferredSize(new java.awt.Dimension(1200, 800));

        editButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                editButtonMousePressed(evt);
            }
        });
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        addRoomButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addRoomButtonMouseClicked(evt);
            }
        });

        nextFloorBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        nextFloorBtn.setText("↑");
        nextFloorBtn.setPreferredSize(new java.awt.Dimension(40, 40));
        nextFloorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextFloorBtnActionPerformed(evt);
            }
        });

        prevFloorBtn.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        prevFloorBtn.setText("↓");
        prevFloorBtn.setPreferredSize(new java.awt.Dimension(40, 40));
        prevFloorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevFloorBtnActionPerformed(evt);
            }
        });

        smallMap.setBackground(new java.awt.Color(255, 255, 255));
        smallMap.setPreferredSize(new java.awt.Dimension(180, 125));

        smallMapBtn.setText("smallMapBtn");
        smallMapBtn.setPreferredSize(new java.awt.Dimension(185, 125));
        smallMapBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smallMapBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout smallMapLayout = new javax.swing.GroupLayout(smallMap);
        smallMap.setLayout(smallMapLayout);
        smallMapLayout.setHorizontalGroup(
            smallMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(smallMapBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
        );
        smallMapLayout.setVerticalGroup(
            smallMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(smallMapLayout.createSequentialGroup()
                .addComponent(smallMapBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        smallMapBtn.getAccessibleContext().setAccessibleDescription("");

        helpButton.setText("?");
        helpButton.setToolTipText("help page ");
        helpButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                helpButtonMouseMoved(evt);
            }
        });
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FrameLayout = new javax.swing.GroupLayout(Frame);
        Frame.setLayout(FrameLayout);
        FrameLayout.setHorizontalGroup(
            FrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FrameLayout.createSequentialGroup()
                .addGroup(FrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FrameLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(FrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FrameLayout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(editButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addRoomButton))
                            .addComponent(prevFloorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nextFloorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(FrameLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(helpButton))))
                    .addGroup(FrameLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(smallMap, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(991, Short.MAX_VALUE))
        );
        FrameLayout.setVerticalGroup(
            FrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FrameLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(smallMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 501, Short.MAX_VALUE)
                .addGroup(FrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addRoomButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(editButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FrameLayout.createSequentialGroup()
                        .addComponent(nextFloorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prevFloorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(helpButton)
                        .addGap(11, 11, 11)))
                .addContainerGap())
        );

        searchPanel.setForeground(new java.awt.Color(13, 17, 23));
        searchPanel.setPreferredSize(new java.awt.Dimension(280, 40));

        searchBox.setText("Search");
        searchBox.setInheritsPopupMenu(true);
        searchBox.setName(""); // NOI18N
        searchBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBoxActionPerformed(evt);
            }
        });

        onSearch.setBorder(null);
        onSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSearchActionPerformed(evt);
            }
        });

        dropDownPanel.setBackground(new java.awt.Color(255, 255, 255));
        dropDownPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dropDownPanel.setPreferredSize(new java.awt.Dimension(280, 40));

        filterPanel.setBackground(new java.awt.Color(255, 255, 255));
        filterPanel.setPreferredSize(new java.awt.Dimension(280, 40));
        filterPanel.add(filterIcon);

        filterText.setText("Filter by: ");
        filterPanel.add(filterText);

        selectBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectBox.setAutoscrolls(true);
        selectBox.setBorder(null);
        selectBox.setMinimumSize(new java.awt.Dimension(80, 23));
        selectBox.setPreferredSize(new java.awt.Dimension(180, 32));
        filterPanel.add(selectBox);

        resultContainer.setBackground(new java.awt.Color(245, 245, 247));

        resultList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        resultList.setPreferredSize(new java.awt.Dimension(280, 120));
        resultPanel.setViewportView(resultList);

        resultContainer.add(resultPanel);

        javax.swing.GroupLayout dropDownPanelLayout = new javax.swing.GroupLayout(dropDownPanel);
        dropDownPanel.setLayout(dropDownPanelLayout);
        dropDownPanelLayout.setHorizontalGroup(
            dropDownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(resultContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        dropDownPanelLayout.setVerticalGroup(
            dropDownPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropDownPanelLayout.createSequentialGroup()
                .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(resultContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        filterPanel.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(onSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dropDownPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(onSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dropDownPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
        );

        layerPanel.setLayer(Frame, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layerPanel.setLayer(searchPanel, javax.swing.JLayeredPane.POPUP_LAYER);

        javax.swing.GroupLayout layerPanelLayout = new javax.swing.GroupLayout(layerPanel);
        layerPanel.setLayout(layerPanelLayout);
        layerPanelLayout.setHorizontalGroup(
            layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layerPanelLayout.createSequentialGroup()
                .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Frame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layerPanelLayout.createSequentialGroup()
                        .addGap(915, 915, 915)
                        .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6))
        );
        layerPanelLayout.setVerticalGroup(
            layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layerPanelLayout.createSequentialGroup()
                .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Frame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(layerPanel, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Custom initComponents for button action commands
     * @author Emma
     */
    public void myInitComponents() {
        // Action commands for next/prev floor buttons
        nextFloorBtn.setActionCommand("up");
        prevFloorBtn.setActionCommand("down");
        // Start at lowest floor by default: prev floor doesn't exist
        prevFloorBtn.setEnabled(false);
        
        // Action command for smallMapBtn
        smallMapBtn.setActionCommand("mapToBuild");
    }
    
    /**
     * 
     * @param evt 
     * @author
     */
    private void searchBoxActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         
    
    /**
     * 
     * @param evt 
     * @author
     */
    private void onSearchActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    /**
     * 
     * @param evt
     * @author Valentina
     */
    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        //CustomTip p = new CustomTip(); //temporarily removed until customTip is merged
        //p.run();
    }                                          

    /**
     * 
     * @param evt
     * @author Valentina
     */
    private void helpButtonMouseMoved(java.awt.event.MouseEvent evt) {                                      

    }                                     

    /**
     * smallMapBtn when receiving an ActionEvent to switch from building to map
     * @param evt ActionEvent "mapToBuild" triggered by clicking this button
     * @author Emma
     */
    private void smallMapBtnActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if ("mapToBuild".equals(evt.getActionCommand())) {
            //unrender rooms on the floor
            unrenderRooms();
            
            // Render campus map image
            ImageIcon pic = new ImageIcon(Objects.requireNonNull(getClass().getResource("assets/campus_map.png")));
            canvas.setImage(pic);
            curBuilding = null;
            curFloor = null;

            // Hide building floor map buttons
            smallMapBtn.setVisible(false);
            smallMap.setVisible(false);
            nextFloorBtn.setVisible(false);
            prevFloorBtn.setVisible(false);
        }
    }                                           

    /**
     * prevFloorButton actions when receiving an ActionEvent to switch floors
     * @param evt ActionEvent "down" or "up" triggered by clicking nextFloor or prevFloor
     * @author Emma
     */
    private void prevFloorBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if ("down".equals(evt.getActionCommand())) {
            //unrender this floors rooms
            unrenderRooms();
            
            // Load in next floor obejct (prev item in floorList)
            curFloor = floorList.get(floorList.indexOf(curFloor) - 1);
            layerList = Map.getLayers();
            roomList = curFloor.getRooms();

            //render the new floor's rooms
            renderRooms();
            
            // Render next floor image
            ImageIcon pic = new ImageIcon(Objects.requireNonNull(getClass().getResource(curFloor.getFilePath())));
            canvas.setImage(pic);

            // If at min floor, disable. Else, enable
            if (floorList.indexOf(curFloor) == 0) {
                nextFloorBtn.setEnabled(true);
                prevFloorBtn.setEnabled(false);
            } else {
                nextFloorBtn.setEnabled(true);
                prevFloorBtn.setEnabled(true);
            }
        }
    }                                            

    /**
     * nextFloorButton actions when receiving an ActionEvent to switch floors
     * @param evt ActionEvent "down" or "up" triggered by clicking nextFloor or prevFloor
     * @author Emma
     */
    private void nextFloorBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if ("up".equals(evt.getActionCommand())) {
            //unrender rooms
            unrenderRooms();
            //if(editMode) 
            
            // Load in next floor obejct (next item in floorList)
            curFloor = floorList.get(floorList.indexOf(curFloor) + 1);
            layerList = Map.getLayers();
            roomList = curFloor.getRooms();
            
            //render the next floor's rooms
            renderRooms();
            
            // Render next floor image
            ImageIcon pic = new ImageIcon(Objects.requireNonNull(getClass().getResource(curFloor.getFilePath())));
            canvas.setImage(pic);
            
            // If at max floor, disable. Else, enable
            if (floorList.indexOf(curFloor) == curBuilding.getFloorNum() - 1) {
                nextFloorBtn.setEnabled(false);
                prevFloorBtn.setEnabled(true);
            } else {
                nextFloorBtn.setEnabled(true);
                prevFloorBtn.setEnabled(true);
            }
        }
    }                                            

    /**
     * 
     * @param evt 
     * @author
     */
    private void addRoomButtonMouseClicked(java.awt.event.MouseEvent evt) {                                           
        addRoomButtonMouseClicked();
    } 
    
    private void addRoomButtonMouseClicked() {                                           
        if (editMode && !addingRoom) {

            addRoomButton.setIcon(addRoomButtonEnabled);
            addingRoom = true;

        }
        else {

            addRoomButton.setIcon(addRoomButtonDisabled);
            addingRoom = false;
            //save new room
            draftRoom = null;
            draftPoly = null;
            //
        }
    }

    /**
     * 
     * @param evt 
     * @author
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }
    
    private void editButtonMousePressed(java.awt.event.MouseEvent evt) {                                        
        editButtonMousePressed();
    }                                       

    private void editButtonMousePressed() {                                        
        editMode = !editMode;
        if (editMode){
            editButton.setIcon(editButtonEnabled);
            addRoomButton.setEnabled(true);
            addRoomButton.setVisible(true);
        }
        else {
            editButton.setIcon(editButtonDisabled);
            addRoomButtonMouseClicked();
            addRoomButton.setEnabled(false);
            addRoomButton.setVisible(false);
        }
    }                                   
 
                                       

  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JsonDB(true);
                new MainWindow(true, null).setVisible(true);
            }
        });
    }

    /**
     * Initialize main window
     * Relocate window to center of screen
     * Set window size
     * Set window background color
     * @author Maxwell
     */
    private void initMainWindow() {
        Point center = GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint();
        this.setLocation(center.x - this.getWidth() / 2, center.y - this.getHeight() / 2);
        this.setResizable(false);
        this.setBackground(Color.WHITE);
        
        layerPanel.addMouseListener(new MouseHandler());
        layerPanel.addMouseMotionListener(new MouseMotionHandler());
        
        layerPanel.setSize(this.getSize());
        //layerPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 500));
    }

    /**
     * Initialize search box
     * Set search box to transparent
     * Set placeholder of search box
     * Create hover effect for search button
     * @author Maxwell
     */
    private void initSearchBox() {
        int padding = 10;
        // https://stackoverflow.com/questions/10274750/java-swing-setting-margins-on-textarea-with-line-border
        Border defaultBorder = BorderFactory.createLineBorder(Color.decode("#eaeaea")), // create default line border for searchBox
                focusBorder = BorderFactory.createLineBorder(Color.decode("#666666")); // create focused line border for searchBox
        searchPanel.setOpaque(false); // make searchPanel transparent
        dropDownPanel.setVisible(false); // hide dropDownPanel
        searchBox.setText("Search"); // set default text of searchBox
        searchBox.setForeground(Color.decode("#999999")); // set default color of searchBox
        searchBox.setBorder(
                BorderFactory.createCompoundBorder(
                        defaultBorder, BorderFactory.createEmptyBorder(0, padding, 0, padding)
                )
        ); // set inset padding of searchBox
        selectBox.setBackground(Color.decode("#ffffff")); // set background color of searchBox
        selectBox.setForeground(Color.decode("#999999")); // set default color of searchBox

        searchBox.addKeyListener(new KeyAdapter() { // add key listener to searchBox
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    handleSearch();
                }
            }
        });
        searchBox.addFocusListener(new FocusAdapter() { // add placeholder effect to searchBox
            @Override
            public void focusGained(FocusEvent e) {
                dropDownPanel.setVisible(true); // show dropDownPanel when searchBox is focused
                if (searchBox.getText().equals("Search")) {
                    searchBox.setText("");
                    searchBox.setForeground(Color.decode("#000000"));
                    searchBox.setBorder(
                            BorderFactory.createCompoundBorder(
                                    focusBorder, BorderFactory.createEmptyBorder(0, padding, 0, padding)
                            )
                    ); // set inset padding of searchBox
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (searchBox.getText().isEmpty()) {
                    searchBox.setText("Search");
                    searchBox.setForeground(Color.decode("#999999"));
                    searchBox.setBorder(
                            BorderFactory.createCompoundBorder(
                                    defaultBorder, BorderFactory.createEmptyBorder(0, padding, 0, padding)
                            )
                    ); // set inset padding of searchBox
                }
            }
        });
        onSearch.setBackground(Color.WHITE); // set background color of onSearch button
        onSearch.setBorder(BorderFactory.createEmptyBorder()); // remove border of onSearch button
        onSearch.setContentAreaFilled(false); // remove background of onSearch button
        onSearch.setOpaque(true); // make onSearch button opaque
        onSearch.setCursor(new Cursor(Cursor.HAND_CURSOR)); // set cursor to hand cursor

        // add hover effect to onSearch button
        onSearch.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                onSearch.setBackground(Color.decode("#F5F5F5"));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                onSearch.setBackground(Color.WHITE);
            }
        });
        onSearch.addActionListener(e -> handleSearch());
    }

    /**
     * Initialise edit and room buttons
     * @author ?
     */
    public void initButtons() {
        
        //initialize edit button
        editButtonDisabled = FontIcon.of(RemixiconAL.EDIT_LINE, 24);
        editButtonEnabled = FontIcon.of(RemixiconAL.EDIT_FILL, 24);
        
        editButton.setIcon(editButtonDisabled);
        //
        
        //initialize add room button
        addRoomButtonDisabled = FontIcon.of(RemixiconAL.ADD_BOX_LINE, 24);
        addRoomButtonEnabled = FontIcon.of(RemixiconAL.ADD_BOX_FILL, 24);
        
        addRoomButton.setIcon(addRoomButtonDisabled);
        addRoomButton.setVisible(false);
        addRoomButton.setEnabled(false);
        //
        
    }
    
    /**
     * Render Frame to display CanvasGUI objects
     * @author Maxwell, Valentina
     */
    private void renderFrame() {
        // Render main window image
        canvas = new CanvasGUI(curFloor.getFilePath(), this.getWidth(), this.getHeight());
        Frame.add(canvas);
        
        // Render smallMapBtn image
        smallMapPic = new CanvasGUI("assets/campus_map.png", 180, 125);
        Frame.add(smallMapPic);
        Frame.setFocusable(true);
        smallMapBtn.add(smallMapPic);
        smallMapBtn.setFocusable(false);
    }
    
    /**
     * Prepare icon for onSearch button
     */
    private void prepareIcon() {
        try {
            // Load icon from font library (currently using RemixIcon)
            FontIcon searchIcon = FontIcon.of(RemixiconMZ.SEARCH_LINE, 20, Color.decode("#828282")),
                    filterIcon = FontIcon.of(RemixiconAL.FILTER_2_LINE, 20, Color.decode("#828282"));
            onSearch.setIcon(searchIcon);
            this.filterIcon.setIcon(filterIcon);
        } catch (Exception e) {
            System.out.printf("Error: icons failed to load\n%s", e.getMessage());
        }
    }
    
    /**
     * Render selectable room boundaries
     * @author Liam
     */
    private void renderRooms() {
        
        //demo code
        /*int[] xpoints = {300, 500, 500};
        int[] ypoints = {50, 100, 200};
        int npoints = 3;
        
        Polygon room1Shape = new Polygon(xpoints, ypoints, npoints);
        
        //Room room1 = new Room(curBuilding, curFloor, room1Shape);
        //room1.addPOI("test", "nothing", room1.getLocation());
        
        int[] xpoints2 = {100, 200, 300};
        int[] ypoints2 = {100, 200, 250};
        int npoints2 = 3;
        
        Polygon room2Shape = new Polygon(xpoints2, ypoints2, npoints2);
        
        //Room room2 = new Room(curBuilding, curFloor, room2Shape);
        //room2.addPOI("test2", "", room2.getLocation());
        //*/
        
        for (Room room : curFloor.getRooms()) {
            attachRoom(room);
        }
             
    }
    
    public void unrenderRooms() {
        for (Room room : curFloor.getRooms()) {
            detachRoom(room);
        }
    }

    /**
     * 
     * @return 
     * @author 
     */
    private int handleSearch() {/*
        JsonDB db; // database instance
        String query = searchBox.getText(); // get query from searchBox
        String[] w; // array of words in query
        StringBuilder sb = new StringBuilder(); // string builder for acronym
        if (query.isEmpty() || query.equals("Search")) {
            System.out.println("Empty query");
            return 1;
        }
        String filter = selectBox.getSelectedItem().toString();
        db = new JsonDB("poi", query);
        if(db.getData().get("status").getAsInt() != 200) {
            w = query.split(" ");
            for (String word : w) {
                sb.append(word.charAt(0));
            }
            db = new JsonDB("poi", sb.toString().toLowerCase());
            if(db.getData().get("status").getAsInt() != 200) {
                System.out.printf("No result found for %s\n", query);
                return 1;
            }
            else {
                System.out.println(db.getData().toString());
            }
        } else {
            System.out.println(db.getData().toString());
        }*/
        return 0;
    }
    
    /**
     * 
     * @param room 
     * @author 
     */
    private void attachRoom(Room room)
    {
        
        layerPanel.add(room, JLayeredPane.PALETTE_LAYER);
        room.setSize(layerPanel.getSize());
        room.setLocation(canvas.x + room.getSavedLocation().x,
                canvas.y + room.getSavedLocation().y);
        
    }
    
    private void detachRoom(Room room) {
        layerPanel.remove(room);
    }
    
    /**
     * Method to add a component to a JLayeredPane
     * @param comp component to be added
     * @author 
     */
    public void attachComponent(JComponent comp)
    {
        
        layerPanel.add(comp, JLayeredPane.POPUP_LAYER);
        
    }
    
    /**
     * 
     * @author Maxwell
     */
    class MouseHandler extends MouseAdapter {
        public void mousePressed(MouseEvent e) {
            initialX = e.getX();
            initialY = e.getY();
            
            if (addingRoom) {
                
                
                if(draftRoom == null) {
                    draftPoly = new Polygon();
                    draftPoly.addPoint(e.getX(), e.getY());
                    draftRoom = new Room(curBuilding, curFloor, draftPoly);
                    attachRoom(draftRoom);
                }
                else {
                    
                    //remove previous iteration of the draft
                    layerPanel.remove(draftRoom);
                    //curFloor.removeRoom(draftRoom);
                    //
                    
                    //add new draft of room
                    draftRoom.addPoint(e.getX()-draftRoom.getX(), e.getY()-draftRoom.getY());                
                    //draftRoom = new Room(draftPoly, draftRoom.getLocation()); //fix coordinates off  
                    attachRoom(draftRoom);
                    //
                    
                }
                
            }
            
        }
        
        /**
         * 
         * @param e mouse event
         * @author Maxwell
         */
        public void mouseEntered(MouseEvent e) {
            
            if (curBuilding == null) 
                for (Building building : Map.getBuildings()) building.translate(deltaX, deltaY);
            else
                for (Room room:curFloor.getRooms()) room.mouseEntered(e);
            
        }
        
        /**
         * 
         * @param e mouse event
         * @author Maxwell
         */
        public void mouseExited(MouseEvent e) {
            
            if (curBuilding == null) 
                for (Building building : Map.getBuildings()) building.translate(deltaX, deltaY);
            else
                for (Room room:curFloor.getRooms()) room.mouseExited(e);
            
        }
        
        /**
         * 
         * @param e mouse event
         * @author Maxwell
         * 
         */
        public void mouseClicked(MouseEvent e) {
            
            if (curBuilding == null) 
                for (Building building : Map.getBuildings()) building.translate(deltaX, deltaY);
            else
                for (Room room:curFloor.getRooms()) room.mouseClicked(e, layerPanel);
            
        }
        
    }

    /**
     * 
     * @author Maxwell
     */
    class MouseMotionHandler extends MouseMotionAdapter {
        public void mouseMoved(MouseEvent e) {
            
            if (curBuilding == null) 
                for (Building building : Map.getBuildings()) building.translate(deltaX, deltaY);
            else
                for (Room room:curFloor.getRooms()) room.mouseMoved(e);
            
        }
        
        public void mouseDragged(MouseEvent e) {
            int currentX = e.getX();
            int currentY = e.getY();
            int deltaX = currentX - initialX;
            int deltaY = currentY - initialY;

            x += deltaX;
            y += deltaY;
            
            canvas.translate(deltaX, deltaY);
            if (curBuilding == null) 
                for (Building building : Map.getBuildings()) building.translate(deltaX, deltaY);
            else
                for (Room room:curFloor.getRooms()) room.translate(deltaX, deltaY);           

            initialX = currentX;
            initialY = currentY;

            repaint();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Frame;
    private javax.swing.JToggleButton addRoomButton;
    private javax.swing.JPanel dropDownPanel;
    private javax.swing.JToggleButton editButton;
    private javax.swing.JLabel filterIcon;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JLabel filterText;
    private javax.swing.JButton helpButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLayeredPane layerPanel;
    private javax.swing.JButton nextFloorBtn;
    private javax.swing.JButton onSearch;
    private javax.swing.JButton prevFloorBtn;
    private javax.swing.JPanel resultContainer;
    private javax.swing.JList<String> resultList;
    private javax.swing.JScrollPane resultPanel;
    private javax.swing.JTextField searchBox;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JComboBox<String> selectBox;
    private javax.swing.JPanel smallMap;
    private javax.swing.JButton smallMapBtn;
    // End of variables declaration//GEN-END:variables
}

